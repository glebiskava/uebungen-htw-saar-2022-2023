#BlueJ class context
comment0.target=Consumer
comment0.text=\r\n\ @author\ Leopold\ Mittelberger,\ Elisee\ Brand\r\n\ @version\ 1.0\r\n\ Dies\ ist\ eine\ Consumer-Klasse\ die\ von\ der\ Klasse\ Producer\ zuf\u00E4llig\ generierte\ Zahlen\ "konsumiert"\ und\ in\ einer\r\n\ ArrayList\ speichert\r\n
comment1.params=producer
comment1.target=Consumer(Producer)
comment1.text=\r\n\ Konstruktor\r\n
comment2.params=number
comment2.target=void\ consume(int)
comment2.text=\r\n\ Diese\ Methode\ nimmt\ einen\ Integer\ entgegen\ und\ berechnet\ die\ Quersumme.\r\n\ F\u00FCr\ jede\ Berechnung\ wird\ der\ Zeitstempel\ der\ Berechnung\ gespeichert\r\n
comment3.params=number
comment3.target=int\ calculateDigitSum(int)
comment3.text=\r\n\ Berechnet\ die\ Quersumme\ einer\ gegebenen\ Zahl.\r\n\r\n\ @param\ number\ Die\ Zahl,\ f\u00FCr\ die\ die\ Quersumme\ berechnet\ werden\ soll.\r\n\ @return\ Die\ berechnete\ Quersumme\ der\ gegebenen\ Zahl.\r\n
comment4.params=
comment4.target=int\ numberOfDifferentResults()
comment4.text=\r\n\ gibt\ an,\ wie\ viele\ unterschiedliche\ Quersummen\ berechnet\r\n\ wurden\r\n\ @return\ anzahl\ an\ quersummen\r\n
comment5.params=number
comment5.target=int\ numberOfOccurrences(int)
comment5.text=\r\n\ gibt\ f\u00FCr\ einen\ gegebenen\ Integer\ an,\ wie\ h\u00E4ufig\ dieser\ als\ Ergebnis\ einer\ Berechnung\ vorkam\r\n\ getOrDefault(number,\ 0)\ \:\ \ Returns\ the\ value\ to\ which\ the\ specified\ key\ is\ mapped,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ or\ defaultValue\ if\ this\ map\ contains\ no\ mapping\ for\ the\ key\r\n\ @param\ number\ Ergebnis\ wonach\ gesucht\ wird\r\n\ @return\ der\ Wert,\ auf\ den\ der\ angegebene\ Schl\u00FCssel\ gemapped\ wird\r\n
comment6.params=
comment6.target=java.util.List\ getCrossTotalsAscending()
comment6.text=\r\n\ gibt\ eine\ Collection\ zur\u00FCck,\ welche\ die\ berechneten\ Quersummen\ in\ aufsteigender\ Reihenfolge\ enth\u00E4lt\r\n\ keySet()\ \:\ Returns\ a\ Set\ view\ of\ the\ keys\ contained\ in\ this\ map\r\n\ @return\ Collection\ mit\ aufsteigender\ Sortierung\r\n
comment7.params=
comment7.target=java.util.List\ getCrossTotalsDescending()
comment7.text=\r\n\ gibt\ eine\ Collection\ zur\u00FCck,\ welche\ die\ berechneten\ Quersummen\ in\ absteigender\ Reihenfolge\ enth\u00E4lt\r\n\ keySet()\ \:\ Returns\ a\ Set\ view\ of\ the\ keys\ contained\ in\ this\ map\r\n\ reverseOrder()\ \:\ Returns\ a\ comparator\ that\ imposes\ the\ reverse\ of\ the\ natural\ ordering\ on\ a\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ collection\ of\ objects\ that\ implement\ the\ Comparable\ interface\r\n\ @return\ Collection\ mit\ absteigender\ Sortierung\r\n
comment8.params=result
comment8.target=java.util.List\ getTimestampsForResult(int)
comment8.text=\r\n\ nimmt\ einen\ Integer\ entgegen\ und\ gibt\ eine\ Collection\ zur\u00FCck,\r\n\ welche\ alle\ zugeh\u00F6rigen\ Zeitstempel\ enth\u00E4lt.\ D.h.\ die\ Zeitstempel\ der\ Berechnungen,\ die\r\n\ zu\ dem\ gegebenen\ Ergebnis\ gef\u00FChrt\ haben\r\n\ @param\ result\ Ergebnis\ wonach\ gesucht\ wird\r\n\ @return\ Ergebnis\ oder\ eine\ leere\ ArrayList,\ wenn\ das\ Ergebnis\ nciht\ gefunden\ wurde\r\n
numComments=9
